service: image-sharing-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    TAG_TABLE: Tags-${self:provider.stage}
    IMAGE_TABLE: Images-${self:provider.stage}
    IMAGES_BY_TAG_INDEX: ImagesByTagIndex
    ATTACHMENTS_S3_BUCKET: Images-attachments-sidrai97-${self:provider.stage}
    SIGNED_URL_EXPIRATION: '300'
    AUTH_0_JWKS_URL: https://sidrai97.auth0.com/.well-known/jwks.json

  tracing:
    lambda: true
    apiGateway: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

resources:
  Resources:
    # API Gateway
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # DynamoDB
    TagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: tagId
            AttributeType: S
          - AttributeName: tagName
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tagId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TAG_TABLE}

    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: attachmentURL
            AttributeType: S
          - AttributeName: tagId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: imageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGE_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGES_BY_TAG_INDEX}
            KeySchema:
              - AttributeName: tagId
                KeyType: HASH
              - AttributeName: imageId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket